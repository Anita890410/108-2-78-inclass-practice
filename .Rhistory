levels(covid19$年齡層)
newLevels
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
levels(factor2)[[4]] <- "尚可"
factor2[[7]] <- "尚可"
factor2
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)
# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
factor1[4:6] <- factor2
factor1
forcats::fct_c(factor1, factor2)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") -> garbageRoutes
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
levels(covid19$年齡層)
newLevels
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
levels(covid19$年齡層)
covid19$年齡層
levels(covid19$年齡層)
newLevels
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
levels(covid19$年齡層)
newLevels
knitr::opts_chunk$set(echo = TRUE)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
library(stringr)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
Sys.getlocale("LC_COLLATE")
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
covid19$年齡層
levels(covid19$年齡層)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
levels(covid19$縣市)
#covid19$縣市 <- factor(covid19$縣市, c("台北市","新北市",...))
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
population[["新北市"]]
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市)
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
startingAges
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
startingAges
names(startingAges) <- level_names
startingAges
sort(startingAges) -> startingAges
startingAges
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1)
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
currentLevels
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
covid19$地區
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
levels(covid19$年齡層)
newLevels
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
levels(factor2)[[4]] <- "尚可"
factor2[[7]] <- "尚可"
factor2
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)
# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
factor1[4:6] <- factor2
factor1
forcats::fct_c(factor1, factor2)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") -> garbageRoutes
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
levels(factor2)[[4]] <- "尚可"
factor2[[7]] <- "尚可"
factor2
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)
# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
factor1[4:6] <- factor2
factor1
forcats::fct_c(factor1, factor2)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") -> garbageRoutes
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights$學年度 <- factor(
studentHeights$學年度, ordered = T
)
studentHeights$學年度
studentHeights$年齡 <- as.integer(studentHeights$年齡)
studentHeights$年齡 <- factor(
studentHeights$年齡, ordered = T
)
studentHeights$年齡
# studentHeights
View(studentHeights)
studentHeights$年齡層 <-
factor(studentHeights$年齡, ordered=T)
levels(studentHeights$年齡層) <-
c(
rep("6-8",3),
rep("9-12",4),
rep("13-15",3)
)
# studentHeights$`年齡層`
studentHeights$學年度 <- factor(
studentHeights$學年度, ordered = T
)
studentHeights$學年度
studentHeights$年齡 <- as.integer(studentHeights$年齡)
studentHeights$年齡 <- factor(
studentHeights$年齡, ordered = T
)
studentHeights$年齡
studentHeights
# studentHeights
studentHeights$年齡層 <-
factor(studentHeights$年齡, ordered=T)
levels(studentHeights$年齡層) <-
c(
rep("6-8",3),
rep("9-12",4),
rep("13-15",3)
)
studentHeights$`年齡層`
# studentHeights$`年齡層`
齡
studentHeights$年齡
studentHeights
studentHeights$年齡
studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights$學年度 <- factor(
studentHeights$學年度, ordered = T
)
studentHeights$學年度
studentHeights$年齡 <- as.integer(studentHeights$年齡)
studentHeights$年齡 <- factor(
studentHeights$年齡, ordered = T
)
studentHeights$年齡
studentHeights
# studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
studentHeights$學年度 <- factor(
studentHeights$學年度, ordered = T
)
studentHeights$學年度
studentHeights$年齡 <- as.integer(studentHeights$年齡)
studentHeights$年齡 <- factor(
studentHeights$年齡, ordered = T
)
studentHeights$年齡
studentHeights
# studentHeights
studentHeights$年齡層 <-
factor(studentHeights$年齡, ordered=T)
levels(studentHeights$年齡層) <-
c(
rep("6-8",3),
rep("9-12",4),
rep("13-15",3)
)
studentHeights$`年齡層`
# studentHeights$`年齡層`
studentHeights$年齡層 <-
factor(studentHeights$年齡, ordered=T)
levels(studentHeights$年齡層) <-
c(
rep("6-8",3),
rep("9-12",4),
rep("13-15",3)
)
studentHeights$`年齡層`
View(studentHeights)
pick_6.8 <- studentHeights$年齡層 == "6-8"
pick_9.12 <- studentHeights$年齡層 == "9-12"
pick_13.15 <- studentHeights$年齡層 == "13-15"
pick_total <- studentHeights$類別 == "總計"
averageHeightByGroup <- c(
`6-8`=mean(studentHeights$平均身高[pick_6.8 & pick_total]),
`9-12`=mean(studentHeights$平均身高[pick_9.12 & pick_total]),
`13-15`=mean(studentHeights$平均身高[pick_13.15 & pick_total])
)
averageHeightByGroup
# averageHeightByGroup
View(studentHeights)
pick_male <- studentHeights$類別=="男"
pick_female <- studentHeights$類別=="女"
heightDifferenceByGroup <- c(
`6-8`=mean(studentHeights$平均身高[pick_6.8 & pick_male])-
mean(studentHeights$平均身高[pick_6.8 & pick_female]),
`9-12`=mean(studentHeights$平均身高[pick_9.12 & pick_male])-mean(studentHeights$平均身高[pick_9.12 & pick_female]),
`13-15`=mean(studentHeights$平均身高[pick_13.15 & pick_male]-mean(studentHeights$平均身高[pick_13.15 & pick_female]))
)
heightDifferenceByGroup
# heightDifferenceByGroup
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
realEstateRegex <- "不動(產)?與?(城鄉)?(環境)?學?系"
# 這裡也可以偷懶不細分字群，而把所有的字「元」都加? 除了一定要出現的字「元」才不加，即
realEstateRegex <-
"不動產?與?城?鄉?環?境?學?系"
# 另外還有一種作法
realEstateRegex <- c("不動[產與城鄉環境學]*系")
# 它要求：一定要是"不動...系"形式，但...由[產與城鄉環境學]任意抽出0個或以上字元隨意組合，這裡的組合沒有先前兩個答案有字元(群）出現先後次序要求.
# realEstateRegex
realEstateRegex <- "不動(產)?與?(城鄉)?(環境)?學?系"
# 這裡也可以偷懶不細分字群，而把所有的字「元」都加? 除了一定要出現的字「元」才不加，即
realEstateRegex <-
"不動產?與?城?鄉?環?境?學?系"
# 另外還有一種作法
realEstateRegex <- c("不動[產與城鄉環境學]*系")
# 它要求：一定要是"不動...系"形式，但...由[產與城鄉環境學]任意抽出0個或以上字元隨意組合，這裡的組合沒有先前兩個答案有字元(群）出現先後次序要求.
realEstateRegex
# realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
factor(differentMajors) -> differentMajors
currentLevels <- levels(differentMajors)
# currentLevels
factor(differentMajors) -> differentMajors
currentLevels <- levels(differentMajors)
currentLevels
# currentLevels
bSchoolRegex <-
"(金融(與合作)?(經營)?|休(閒與)?運(動管理)?)學?系"
# 或偷懶
bSchoolRegex <-
"(金融與?合?作?經?營?|休閒?與?運動?管?理?)學?系"
bSchoolRegex
# bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
levels(differentMajors) -> currentLevels
currentLevels
str_replace(
currentLevels,
"不動(產)?與?(城鄉)?(環境)?學?系",
"不動系"
) -> currentLevels
str_replace(
currentLevels,
"休閒?與?運?動?管?理?學?系",
"休運系"
) -> currentLevels
str_replace(
currentLevels,
"公共?行?政?暨?政?策?學?系",
"公行系"
) -> currentLevels
str_replace(
currentLevels,
"金融?與?合?作?經?營?學?系",
"金融系"
) -> currentLevels
str_replace(
currentLevels,
"社會學?系",
"社會系"
) -> currentLevels
str_replace(
currentLevels,
"經濟學?系",
"經濟系"
) -> currentLevels
levels(differentMajors) <-  currentLevels
# differentMajors
differentMajors
school <- differentMajors
levels(school) -> currentLevels
str_replace(
currentLevels,
"(休運|金融)系", "商學院"
) -> currentLevels
str_replace(
currentLevels,
"(經濟|社會|社工)系", "社科院"
) -> currentLevels
str_replace(
currentLevels,
"(公行|不動)系", "公共事務學院"
) -> currentLevels
levels(school) <- currentLevels
# school
school
levels(differentMajors) -> currentLevels
currentLevels
str_replace(
currentLevels,
"不動(產)?與?(城鄉)?(環境)?學?系",
"不動系"
) -> currentLevels
str_replace(
currentLevels,
"休閒?與?運?動?管?理?學?系",
"休運系"
) -> currentLevels
str_replace(
currentLevels,
"公共?行?政?暨?政?策?學?系",
"公行系"
) -> currentLevels
str_replace(
currentLevels,
"金融?與?合?作?經?營?學?系",
"金融系"
) -> currentLevels
str_replace(
currentLevels,
"社會學?系",
"社會系"
) -> currentLevels
str_replace(
currentLevels,
"社會工作學?系",
"社工系"
) -> currentLevels
str_replace(
currentLevels,
"經濟學?系",
"經濟系"
) -> currentLevels
levels(differentMajors) <-  currentLevels
differentMajors
# differentMajors
school <- differentMajors
levels(school) -> currentLevels
str_replace(
currentLevels,
"(休運|金融)系", "商學院"
) -> currentLevels
str_replace(
currentLevels,
"(經濟|社會|社工)系", "社科院"
) -> currentLevels
str_replace(
currentLevels,
"(公行|不動)系", "公共事務學院"
) -> currentLevels
levels(school) <- currentLevels
school
# school
