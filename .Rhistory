"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
year
westernYear <- as.integer(year)+1911
westernYear
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
datefinal <- lubridate::ymd(twDate_reformat)
datefinal
class(datefinal)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
str_extract(addresses,"[0-9]+(?=號)")
str_extract_all(
"我的名字8293叫17380小abce明",
"[\u4E00-\u9FFF]+")
c(
"https://github.com/student1/108-2-78-inclass-practice",
"github.com/student2 / 108-2-56-inclass-practice",
"https://github.com/student3/108-2-56-inclass-practice",
"student4 / 108-2-56-inclass-practice",
"student5"
) -> studentGithubURLs
target_regex <-
"^https://github.com/[:graph:]+/108-2-(56|78)-inclass-practice"
str_detect(
studentGithubURLs, target_regex
)
midtermFilename <-
c("exam1-410773888.rmd",
"exam1410882888.Rmd",
"410682999第一次期中考.Rmd",
"期中考310573888.R")
midtermFilename <- c(midtermFilename,"exam149975013.Rmd","499770121stExam.Rmd")
# 1.
pattern <- "[43][0-9]{8}"
str_extract(midtermFilename,pattern)
# 2.
target_regex <- "[0-9]{2}"
A_regex <- "[43](107|108|106|105)"
pattern <- glue::glue("(?<={A_regex}){target_regex}")
str_extract(midtermFilename, pattern)
# 3.
midtermFilename <- c(
midtermFilename, "exam149975013.Rmd","499770121stExam.Rmd"
)
# 3.1
pattern <- "[43](99|107|108|106|105)[0-9]{5}"
str_extract(midtermFilename,pattern)
# 3.2
## target pattern: 2位數字
target_regex <- "[0-9]{2}"
## target location: 4或3,接99,105-108
A_regex <- "[43](99|107|108|106|105)"
pattern <- glue::glue(
"(?<={A_regex}){target_regex}"
)
pattern
str_extract(midtermFilename,pattern)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
violatedArticles <- unique(badEmployers$law)
violatedArticles
table_countsByArticle <- table(badEmployers$law)
table_countsByArticle
names(table_countsByArticle)
lawContent <- table(badEmployers$lawContent)
mostViolatedArticle <-
table_countsByArticle[table_countsByArticle == max(table_countsByArticle)]
mostViolatedArticle <-
table_countsByArticle[table_countsByArticle == max(table_countsByArticle)]
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
violatedArticles <- unique(badEmployers$law)
violatedArticles
table_countsByArticle <- table(badEmployers$law)
table_countsByArticle
names(table_countsByArticle)
mostViolatedArticle <-
table_countsByArticle[table_countsByArticle == max(table_countsByArticle)]
class(mostViolatedArticle)
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
violatedArticle <- table(badEmployers$law)
k2 <- sort(violatedArticle, decreasing = TRUE)
mostViolatedArticle <- k2[1]
mostViolatedArticle
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
lawContent <- table(badEmployers$lawContent)
tt <- sort(lawContent, decreasing = TRUE)
mostViolatedArticle_content <- c(names(tt[1]))
lawContent
mostViolatedArticle_content
class(mostViolatedArticle_content)
pick_mostViolatedArticle_content <- table(badEmployers$lawContent)>=max(table(badEmployers$lawContent))
mostViolatedArticle_content <- table(badEmployers$lawContent)[pick_mostViolatedArticle_content]
as.character(mostViolatedArticle_content)
names(mostViolatedArticle_content)
lawContent <- table(badEmployers$lawContent)
tt <- sort(lawContent, decreasing = TRUE)
mostViolatedArticle_content <- c(names(tt[1]))
lawContent
mostViolatedArticle_content
class(mostViolatedArticle_content)
pick_mostViolatedArticle_content <- table(badEmployers$lawContent)>=max(table(badEmployers$lawContent))
mostViolatedArticle_content <- table(badEmployers$lawContent)[pick_mostViolatedArticle_content]
as.character(mostViolatedArticle_content)
names(mostViolatedArticle_content)
lawContent <- table(badEmployers$lawContent)
tt <- sort(lawContent, decreasing = TRUE)
mostViolatedArticle_content <- c(names(tt[1]))
mostViolatedArticle_content
class(mostViolatedArticle_content)
pick_mostViolatedArticle_content <- table(badEmployers$lawContent)>=max(table(badEmployers$lawContent))
mostViolatedArticle_content <- table(badEmployers$lawContent)[pick_mostViolatedArticle_content]
as.character(mostViolatedArticle_content)
names(mostViolatedArticle_content)
class(mostViolatedArticle_content)
lawContent <- table(badEmployers$lawContent)
tt <- sort(lawContent, decreasing = TRUE)
mostViolatedArticle_content <- c(names(tt[1]))
mostViolatedArticle_content
class(mostViolatedArticle_content)
pick_mostViolatedArticle_content <- table(badEmployers$lawContent)>=max(table(badEmployers$lawContent))
mostViolatedArticle_content <- table(badEmployers$lawContent)[pick_mostViolatedArticle_content]
as.character(mostViolatedArticle_content)
names(mostViolatedArticle_content)
class(as.character(mostViolatedArticle_content))
lawContent <- table(badEmployers$lawContent)
tt <- sort(lawContent, decreasing = TRUE)
mostViolatedArticle_content <- c(names(tt[1]))
mostViolatedArticle_content
class(mostViolatedArticle_content)
pick_mostViolatedArticle_content <- table(badEmployers$lawContent)>=max(table(badEmployers$lawContent))
mostViolatedArticle_content <- table(badEmployers$lawContent)[pick_mostViolatedArticle_content]
names(mostViolatedArticle_content)
class(as.character(mostViolatedArticle_content))
length(mostViolatedArticle_content)
lawContent <- table(badEmployers$lawContent)
tt <- sort(lawContent, decreasing = TRUE)
mostViolatedArticle_content <- c(names(tt[1]))
mostViolatedArticle_content
class(mostViolatedArticle_content)
View(badEmployers)
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
chinese <- factor(ordered(table$`級分`+1))
levels(chinese)
class(chinese)
chinese
View(table)
new_table$`級分` <- table$`級分`+1
table$`級分` <- table$`級分`+1
chinese <- factor(ordered(table$`級分`))
levels(chinese)
class(chinese)
chinese
View(table)
table$`級分` <- table$`級分`+1
chinese <- factor(ordered(table$`級分`))
levels(chinese)
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
table$`級分` <- table$`級分`+1
chinese <- factor(ordered(table$`級分`))
levels(chinese)
class(chinese)
chinese
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
table$`級分` <- table$`級分`+1
levels(as.factor(table$`國文`))
table$`國文` <- ordered(table$`國文`)
chinese <- table$`國文`
class(chinese)
chinese
print(students10[c("姓名","志願")])
ntpu_list <- stringr::str_detect(students10$`志願`,"北大")
ntpu_list
ntpu_namelist <- students10$`姓名`[ntpu_list]
ntpu_namelist
ntpu_list <- stringr::str_detect(students10$`志願`,"北大")
ntpu_list
ntpu_chinese <- students10$`國文` >= 12
ntpu_chinese
ntpu_eng_math <- students10$`英文`+students10$`數學`>=26
ntpu_eng_math
ntpu_candicate <- ntpu_list & ntpu_chinese & ntpu_eng_math
ntpu_candicate
ntpu_eco <- students10$`姓名`[ntpu_candicate]
ntpu_eco
class(ntpu_eco)
ntpu_list <- stringr::str_detect(students10$`志願`,"北大")
ntpu_list
ntpu_chinese <- students10$`姓名`[students10$`國文` >= 12]
ntpu_chinese
ntpu_eng_math <- students10$`姓名`[students10$`英文`+students10$`數學`>=26]
ntpu_eng_math
ntpu_candicate <- students10$`姓名`[ntpu_list & ntpu_chinese & ntpu_eng_math]
ntpu_list <- stringr::str_detect(students10$`志願`,"北大")
ntpu_list
ntpu_chinese <- students10$`姓名`[students10$`國文` >= 12]
ntpu_chinese
ntpu_eng_math <- students10$`姓名`[students10$`英文`+students10$`數學`>=26]
ntpu_eng_math
ntpu_candicate <- ntpu_list & ntpu_chinese & ntpu_eng_math
ntpu_list <- students10$`姓名`[stringr::str_detect(students10$`志願`,"北大")]
ntpu_list
ntpu_chinese <- students10$`姓名`[students10$`國文` >= 12]
ntpu_chinese
ntpu_eng_math <- students10$`姓名`[students10$`英文`+students10$`數學`>=26]
ntpu_eng_math
ntpu_candicate <- ntpu_list & ntpu_chinese & ntpu_eng_math
ntpu_list <- students10$`姓名`[stringr::str_detect(students10$`志願`,"北大")]
ntpu_list
ntpu_chinese <- students10$`姓名`[students10$`國文` >= 12]
ntpu_chinese
ntpu_eng_math <- students10$`姓名`[students10$`英文`+students10$`數學`>=26]
ntpu_eng_math
ntpu_candicate <- ntpu_list & ntpu_chinese & ntpu_eng_math
#ntpu_list <- students10$`姓名`[stringr::str_detect(students10$`志願`,"北大")]
ntpu_namelist
ntpu_chinese <- students10$`姓名`[students10$`國文` >= 12]
ntpu_chinese
ntpu_eng_math <- students10$`姓名`[students10$`英文`+students10$`數學`>=26]
ntpu_eng_math
ntpu_candicate <- ntpu_list & ntpu_chinese & ntpu_eng_math
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
table$`級分` <- table$`級分`+1
levels(as.factor(table$`國文`))
table$`國文` <- ordered(table$`國文`)
chinese <- table$`國文`
class(chinese)
chinese
print(students10[c("姓名","志願")])
ntpu_list <- stringr::str_detect(students10$`志願`,"北大")
ntpu_list
ntpu_namelist <- students10$`姓名`[ntpu_list]
ntpu_namelist
#ntpu_list <- students10$`姓名`[stringr::str_detect(students10$`志願`,"北大")]
ntpu_namelist
ntpu_chinese <- students10$`姓名`[students10$`國文` >= 12]
ntpu_chinese
ntpu_eng_math <- students10$`姓名`[students10$`英文`+students10$`數學`>=26]
ntpu_eng_math
ntpu_candicate <- ntpu_list & ntpu_chinese & ntpu_eng_math
#ntpu_list <- students10$`姓名`[stringr::str_detect(students10$`志願`,"北大")]
ntpu_namelist
ntpu_chinese <- students10$`姓名`[students10$`國文` >= 12]
ntpu_chinese
ntpu_eng_math <- students10$`姓名`[students10$`英文`+students10$`數學`>=26]
ntpu_eng_math
ntpu_candicate <- ntpu_namelist & ntpu_chinese & ntpu_eng_math
ntpu_list <- stringr::str_detect(students10$`志願`,"北大")
ntpu_list
ntpu_chinese <- students10$`國文` >= 12
ntpu_chinese
ntpu_eng_math <- students10$`英文`+students10$`數學`>=26
ntpu_eng_math
ntpu_candicate <- ntpu_namelist & ntpu_chinese & ntpu_eng_math
ntpu_list <- stringr::str_detect(students10$`志願`,"北大")
ntpu_list
ntpu_chinese <- students10$`國文` >= 12
ntpu_chinese
ntpu_eng_math <- students10$`英文`+students10$`數學`>=26
ntpu_eng_math
ntpu_candicate <- ntpu_list & ntpu_chinese & ntpu_eng_math
ntpu_candicate
ntpu_eco <- students10$`姓名`[ntpu_candicate]
ntpu_eco
class(ntpu_eco)
pass <- ntpu_namelist[ntpu_namelist %in% ntpu_eco]
congrats <-
paste0(c("恭喜"),c(pass),c("同學錄取國立臺北大學經濟系"))
class(congrats)
congrats
kframe <- badEmployers['dt']
kdate <- kframe[['dt']]
kmonth <- sort(table(month(kdate)), decreasing = TRUE)
popularSentenceMonth <- names(kmonth[1])
popularSentenceMonth
class(popularSentenceMonth)
kframe <- badEmployers['dt']
kdate <- kframe[['dt']]
kmonth <- sort(table(month(kdate)), decreasing = TRUE)
popularSentenceMonth <- names(kmonth[1])
popularSentenceMonth
class(popularSentenceMonth)
kframe <- badEmployers['dt']
kframe
kdate <- kframe[['dt']]
kdate
kmonth <- sort(table(month(kdate)), decreasing = TRUE)
kmonth
popularSentenceMonth <- names(kmonth[1])
popularSentenceMonth
class(popularSentenceMonth)
View(kframe)
kframe <- badEmployers['dt']
kdate <- kframe[['dt']]
kmonth <- sort(table(month(kdate)), decreasing = TRUE)
popularSentenceMonth <- names(kmonth[1])
popularSentenceMonth
class(popularSentenceMonth)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
violatedArticles <- unique(badEmployers$law)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
violatedArticles <- unique(badEmployers$law)
violatedArticles
table_countsByArticle <- table(badEmployers$law)
table_countsByArticle
names(table_countsByArticle)
mostViolatedArticle <-
table_countsByArticle[table_countsByArticle == max(table_countsByArticle)]
class(mostViolatedArticle)
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle <-
table_countsByArticle[table_countsByArticle == max(table_countsByArticle)]
class(mostViolatedArticle)
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
mostViolatedArticle <-
table_countsByArticle[table_countsByArticle == max(table_countsByArticle)]
class(mostViolatedArticle)
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
pick_mostViolatedArticle_content <- table(badEmployers$lawContent)>=max(table(badEmployers$lawContent))
mostViolatedArticle_content <- table(badEmployers$lawContent)[pick_mostViolatedArticle_content]
names(mostViolatedArticle_content)
class(as.character(mostViolatedArticle_content))
length(mostViolatedArticle_content)
kframe <- badEmployers['dt']
kdate <- kframe[['dt']]
kmonth <- sort(table(month(kdate)), decreasing = TRUE)
popularSentenceMonth <- names(kmonth[1])
popularSentenceMonth
class(popularSentenceMonth)
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
table$`級分` <- table$`級分`+1
levels(as.factor(table$`國文`))
table$`國文` <- ordered(table$`國文`)
chinese <- table$`國文`
class(chinese)
chinese
print(students10[c("姓名","志願")])
ntpu_list <- stringr::str_detect(students10$`志願`,"北大")
ntpu_list
ntpu_namelist <- students10$`姓名`[ntpu_list]
ntpu_namelist
ntpu_list <- stringr::str_detect(students10$`志願`,"北大")
ntpu_list
ntpu_chinese <- students10$`國文` >= 12
ntpu_chinese
ntpu_eng_math <- students10$`英文`+students10$`數學`>=26
ntpu_eng_math
ntpu_candicate <- ntpu_list & ntpu_chinese & ntpu_eng_math
ntpu_candicate
ntpu_eco <- students10$`姓名`[ntpu_candicate]
ntpu_eco
class(ntpu_eco)
pass <- ntpu_namelist[ntpu_namelist %in% ntpu_eco]
congrats <-
paste0(c("恭喜"),c(pass),c("同學錄取國立臺北大學經濟系"))
class(congrats)
congrats
View(badEmployers)
View(kframe)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
kframe <- badEmployers['dt']
kdate <- kframe[['dt']]
kmonth <- sort(table(month(kdate)), decreasing = TRUE)
kmonth
popularSentenceMonth <- names(kmonth[1])
popularSentenceMonth
class(popularSentenceMonth)
View(badEmployers)
knitr::opts_chunk$set(echo = TRUE)
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1')
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
# back_regex
back_regex = "(?=，)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# 這樣也可以
# str_extract_all(twoNames, "段(兄弟|兄)")
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
textExample <- c("段1......。　　段2....。")
context_picked <- as.data.frame(semiGodsSemiDevils$data)$text[3]
context_picked
context_picked_split = str_split(context_picked, "\\s\\s")
str(context_picked_split)
# context_picked_split
# mention_duan
mention_duan <- str_extract_all(unlist(context_picked_split), "[姓]?段(譽|兄弟|兄|大哥|相公|君|的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
# table_duan
table_duan <- table(unlist(mention_duan))
table_duan
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
# back_regex
back_regex = "(?=，)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# 這樣也可以
# str_extract_all(twoNames, "段(兄弟|兄)")
# back_regex
back_regex = "(?=，)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# 這樣也可以
# str_extract_all(twoNames, "段(兄弟|兄)")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# 這樣也可以
# str_extract_all(twoNames, "段(兄弟|兄)")
# back_regex
back_regex = "(?=，)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# 這樣也可以
# str_extract_all(twoNames, "段(兄弟|兄)")
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
context_picked <- as.data.frame(semiGodsSemiDevils$data)$text[3]
context_picked
pick <- semiGodsSemiDevils$data[[1]]$section=="P2"
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
context_picked
textExample <- c("段1......。　　段2....。")
textExample <- c("段1......。　　段2....。")
context_picked_split = str_split(context_picked, "\\s\\s")
str(context_picked_split)
# context_picked_split
context_picked_split = str_split(context_picked, "\\s\\s")
str(context_picked_split)
# context_picked_split
context_picked_split = str_split(context_picked, "\\s\\s")
str(context_picked_split)
context_picked_split
# mention_duan
mention_duan <- str_extract_all(unlist(context_picked_split), "[姓]?段(譽|兄弟|兄|大哥|相公|君|的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
# mention_duan
mention_duan <- str_extract_all(unlist(context_picked_split), "[姓]?段(譽|兄弟|兄|大哥|相公|君|的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
# back_regex
back_regex = "(?!弟)"
back_regex = "(?!弟)"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# 這樣也可以
# str_extract_all(twoNames, "段(兄弟|兄)")
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
pick <- semiGodsSemiDevils$data[[1]]$section=="P2"
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
context_picked
textExample <- c("段1......。　　段2....。")
context_picked_split = str_split(context_picked, "\\s\\s")
str(context_picked_split)
context_picked_split
# table_duan
table_duan <- table(unlist(mention_duan))
table_duan
View(mention_duan)
View(params)
# mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]], "[姓]?段(譽|兄弟|兄|大哥|相公|君|的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
# mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]], "(段譽|段兄弟|段兄|段大哥|段相公|段君|姓段的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
# mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]], "(段譽|段兄弟|段兄|段大哥|段相公|段君|姓段的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
