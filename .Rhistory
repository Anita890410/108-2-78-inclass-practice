list("student B", NA), # 沒交作業
list("student C", factor(c(2,3,4,5))),
list("student D", factor(c(2,3,5)))
) -> collectionHWs
correctAns <- factor(c(2,3,4,5))
output <- vector("integer",length(collectionHWs))
nameVector <- vector("character", length(collectionHWs))
nameVector[[1]] <- collectionHWs[[1]][[1]]
nameVector
studentAns <- collectionHWs[[1]][[2]]
nameVector[[1]] <- collectionHWs[[1]][[1]]
nameVector
studentAns <- collectionHWs[[1]][[2]]
studentAns
nameVector[[1]] <- collectionHWs[[1]][[1]]
nameVector
studentAns <- collectionHWs[[1]][[2]]
studentAns
# 改題部份
if(identical(studentAns, correctAns)){
output[[1]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[1]] <- 5
} else {
output[[1]] <- 0
}
}
nameVector[[1]] <- collectionHWs[[1]][[1]]
nameVector
studentAns <- collectionHWs[[1]][[2]]
studentAns
# 改題部份
if(identical(studentAns, correctAns)){
output[[1]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[1]] <- 5
} else {
output[[1]] <- 0
}
nameVector[[1]] <- collectionHWs[[1]][[1]]
nameVector
studentAns <- collectionHWs[[1]][[2]]
studentAns
# 改題部份
if(identical(studentAns, correctAns)){
output[[1]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[1]] <- 5
} else {
output[[1]] <- 0
}
output
#第1個學生
nameVector[[1]] <- collectionHWs[[1]][[1]]
nameVector
studentAns <- collectionHWs[[1]][[2]]
studentAns
# 改題部份
if(identical(studentAns, correctAns)){
output[[1]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[1]] <- 5
} else {
output[[1]] <- 0
}
output
#第2個學生
nameVector[[2]] <- collectionHWs[[2]][[1]]
nameVector
studentAns <- collectionHWs[[2]][[2]]
studentAns
# 改題部份
if(identical(studentAns, correctAns)){
output[[2]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[2]] <- 5
} else {
output[[2]] <- 0
}
output
#第1個學生
nameVector[[1]] <- collectionHWs[[1]][[1]]
nameVector
studentAns <- collectionHWs[[1]][[2]]
studentAns
# 改題部份
if(identical(studentAns, correctAns)){
output[[1]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[1]] <- 5
} else {
output[[1]] <- 0
}
output
#第2個學生
nameVector[[2]] <- collectionHWs[[2]][[1]]
nameVector
studentAns <- collectionHWs[[2]][[2]]
studentAns
# 改題部份
if(identical(studentAns, correctAns)){
output[[2]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[2]] <- 5
} else {
output[[2]] <- 0
}
output
#第3個學生
nameVector[[3]] <- collectionHWs[[3]][[1]]
nameVector
studentAns <- collectionHWs[[3]][[2]]
studentAns
# 改題部份
if(identical(studentAns, correctAns)){
output[[3]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[3]] <- 5
} else {
output[[3]] <- 0
}
output
#第4個學生
nameVector[[4]] <- collectionHWs[[4]][[1]]
nameVector
studentAns <- collectionHWs[[4]][[2]]
studentAns
# 改題部份
if(identical(studentAns, correctAns)){
output[[4]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[4]] <- 5
} else {
output[[4]] <- 0
}
output
1 %>% {#第1個學生
nameVector[[.]] <- collectionHWs[[.]][[1]]
studentAns <- collectionHWs[[.]][[2]]
if(identical(studentAns, correctAns)){
output[[.]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.]] <- 5
} else {
output[[.]] <- 0
}}
2 %>% {#第2個學生
nameVector[[.]] <- collectionHWs[[.]][[1]]
studentAns <- collectionHWs[[.]][[2]]
if(identical(studentAns, correctAns)){
output[[.]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.]] <- 5
} else {
output[[.]] <- 0
}}
3 %>% {#第3個學生
nameVector[[.]] <- collectionHWs[[.]][[1]]
studentAns <- collectionHWs[[.]][[2]]
if(identical(studentAns, correctAns)){
output[[.]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.]] <- 5
} else {
output[[.]] <- 0
}}
4 %>% {#第4個學生
nameVector[[.]] <- collectionHWs[[.]][[1]]
studentAns <- collectionHWs[[.]][[2]]
if(identical(studentAns, correctAns)){
output[[.]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.]] <- 5
} else {
output[[.]] <- 0
}}
output
for(.x in 1:4){
nameVector[[.]] <- collectionHWs[[.]][[1]]
studentAns <- collectionHWs[[.]][[2]]
if(identical(studentAns, correctAns)){
output[[.]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.]] <- 5
} else {
output[[.]] <- 0
}}
for(.x in 1:4){
nameVector[[.x]] <- collectionHWs[[.]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}}
for(.x in 1:4){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}}
for(.x in 1:4){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}}
output
for(.x in seq_along(collectionHWs)){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(is.na(studentAns)){
output[[.x]] <- 0
next
}
# 改題部份
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}
}
names(output) <- nameVector
print(output)
for(.x in seq_along(collectionHWs)){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(is.na(studentAns)){
output[[.x]] <- 0
next
}
# 改題部份
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}
}
names(output) <- nameVector
print(output)
for(.x in 1:4){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(is.na(studentAns)){
output[[.x]] <- 0
next
}
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}}
output
for(.x in 1:4){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}}
output
for(.x in 1:4){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(is.na(studentAns)){
output[[.x]] <- 0
next
}
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}}
output
seq_along(collectionHWs)
seq_along(collectionHWs)
1:4
sum <- 0 #得到幾個正面
count <- 0 #計擲了幾次
# 1st toss
count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
newToss
# 2nd toss
count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
newToss
# 3rd toss
count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
newToss
# 4th toss
count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
newToss
sum <- 0 #得到幾個正面
count <- 0 #計擲了幾次
# 1st toss
1 %>% {count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}}
newToss
# 2nd toss
2 %>% {count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}}
newToss
# 3rd toss
3 %>% {count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}}
newToss
# 4th toss
4 %>% {count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}}
newToss
for(i in 1:100){count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}}
sum <- 0 #得到幾個正面
count <- 0 #計擲了幾次
for(i in 1:100){count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}}
sum <- 0 #得到幾個正面
count <- 0 #計擲了幾次
for(i in 1:100){count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
if(sum==5){
break
}
}}
sum <- 0 #得到幾個正面
count <- 0 #計擲了幾次
for(i in 1:100){count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
if(sum==5){
break
}
}
sum <- 0 #得到幾個正面
count <- 0 #計擲了幾次
while(sum != 5){ #留在迴圈條件
count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
}
sum <- 0 #得到幾個正面
count <- 0 #計擲了幾次
max_count <- 500
while(sum != 5 && count<=max_count){ #留在迴圈條件 non-break條件
count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
}
sum <- 0 #得到幾個正面
count <- 0 #計擲了幾次
for(i in 1:100){
count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
if(sum == 5){ #跳出迴圈條件
break
}
}
sum <- 0 #得到幾個正面
count <- 0 #計擲了幾次
max_count <- 500
while(sum != 5 && count<=max_count){ #留在迴圈條件 non-break條件
count <- count+1 #計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
}
sum <- 0
for(i in 1:10){
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
print(glue::glue("已擲{i}次得到{sum}次正面"))
}
sum <- 0
for(i in 1:100){
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
print(glue::glue("已擲{i}次得到{sum}次正面"))
if(sum==5){
break
}
}
while(continueCondition){
body
}
sum <- 0
count <- 0 # 計數器
while(sum<5){
count <- count+1 # 計數器+1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
print(glue::glue("已擲{count}次得到{sum}次正面"))
}
count <- 0 # 計數器開始值
max_count <- 500 # 計數上限
while(continueCondition && count <= max_count){ # 增加計數上限條件
count <- count+1 # 計數器加1
body
}
set.seed(1000) # 控制sample抽出的數字sequence固定，通常進行方法比對用
output <- c()
for(.x in 1:10){
new <- sample(0:100,1)
if(new %% 3==0){
output <- c(output, new)
}
}
print(output)
set.seed(1000) # 控制sample抽出的數字sequence固定，通常進行方法比對用
output <- c()
for(.x in 1:10){
new <- sample(0:100,1)
if(new %% 3==0){
output <- c(output, new)
}
}
print(output)
set.seed(1000) # 控制sample抽出的數字sequence固定，通常進行方法比對用
count <- 0 # 計數器起始值
output <- c()
while(count <= 10){ # 計數上限條件
count <- count+1 # 計數器+1
new <- sample(0:100,1)
if(new %% 3==0){
output <- c(output, new)
}
}
print(output)
a <- sample(1:100, 10, replace=T)
print(a)
sum <- 0
for(.x in 1:10){
sum <- sum+a[[.x]]
}
print(sum)
count <- 0 # 計數器起始值
sum <- 0
while(count <= 10){ # 計數上限條件
count <- count+1 # 計數器+1
sum <- sum+a[[count]]
}
