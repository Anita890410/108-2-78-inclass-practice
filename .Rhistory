pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# 這樣也可以
# str_extract_all(twoNames, "段(兄弟|兄)")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# 這樣也可以
# str_extract_all(twoNames, "段(兄弟|兄)")
# back_regex
back_regex = "(?=，)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# 這樣也可以
# str_extract_all(twoNames, "段(兄弟|兄)")
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
context_picked <- as.data.frame(semiGodsSemiDevils$data)$text[3]
context_picked
pick <- semiGodsSemiDevils$data[[1]]$section=="P2"
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
context_picked
textExample <- c("段1......。　　段2....。")
textExample <- c("段1......。　　段2....。")
context_picked_split = str_split(context_picked, "\\s\\s")
str(context_picked_split)
# context_picked_split
context_picked_split = str_split(context_picked, "\\s\\s")
str(context_picked_split)
# context_picked_split
context_picked_split = str_split(context_picked, "\\s\\s")
str(context_picked_split)
context_picked_split
# mention_duan
mention_duan <- str_extract_all(unlist(context_picked_split), "[姓]?段(譽|兄弟|兄|大哥|相公|君|的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
# mention_duan
mention_duan <- str_extract_all(unlist(context_picked_split), "[姓]?段(譽|兄弟|兄|大哥|相公|君|的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
# back_regex
back_regex = "(?!弟)"
back_regex = "(?!弟)"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# 這樣也可以
# str_extract_all(twoNames, "段(兄弟|兄)")
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
pick <- semiGodsSemiDevils$data[[1]]$section=="P2"
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
context_picked
textExample <- c("段1......。　　段2....。")
context_picked_split = str_split(context_picked, "\\s\\s")
str(context_picked_split)
context_picked_split
# table_duan
table_duan <- table(unlist(mention_duan))
table_duan
View(mention_duan)
View(params)
# mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]], "[姓]?段(譽|兄弟|兄|大哥|相公|君|的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
# mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]], "(段譽|段兄弟|段兄|段大哥|段相公|段君|姓段的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
# mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]], "(段譽|段兄弟|段兄|段大哥|段相公|段君|姓段的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
knitr::opts_chunk$set(echo = TRUE)
fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
install.packages("fromJSON")
fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
covid19$年齡層 %>% factor() %>% levels -> allLevels
fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
install.packages("str_sub")
library(stringr)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
Sys.getlocale("LC_COLLATE")
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
covid19$年齡層
levels(covid19$年齡層)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
covid19$年齡層
levels(covid19$年齡層)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
population[["新北市"]]
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市)
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
startingAges
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
startingAges
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
startingAges
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
startingAges
names(startingAges) <- level_names
startingAges
sort(startingAges) -> startingAges
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
sort(startingAges) -> startingAges
startingAges
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1)
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
covid19$地區
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
currentLevels
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
covid19$地區
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
levels(covid19$年齡層)
newLevels
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
levels(factor2)[[4]] <- "尚可"
factor2[[7]] <- "尚可"
factor2
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)
# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
factor1[4:6] <- factor2
factor1
forcats::fct_c(factor1, factor2)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") -> garbageRoutes
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
# studentHeights
studentHeights$學年度 <- factor(studentHeights$學年度, levels = levels(factor(as.integer(studentHeights$學年度))), ordered = TRUE)
studentHeights$年齡 <- factor(studentHeights$年齡, levels = levels(factor(as.integer(studentHeights$年齡))), ordered = TRUE)
levels(studentHeights$學年度)
levels(studentHeights$年齡)
studentHeights
# studentHeights
studentHeights$`學年度` <- factor(studentHeights$`學年度`, levels = levels(factor(as.integer(studentHeights$`學年度`))), ordered = TRUE)
studentHeights$`年齡` <- factor(studentHeights$`年齡`, levels = levels(factor(as.integer(studentHeights$`年齡`))), ordered = TRUE)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
View(studentHeights)
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
View(studentHeights)
# studentHeights
studentHeights$`學年度` <- factor(studentHeights$`學年度`, levels = levels(factor(as.integer(studentHeights$`學年度`))), ordered = TRUE)
studentHeights$`年齡` <- factor(studentHeights$`年齡`, levels = levels(factor(as.integer(studentHeights$`年齡`))), ordered = TRUE)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
# studentHeights
studentHeights$`學年度` <- factor(studentHeights$`學年度`, levels = levels(factor(as.integer(studentHeights$`學年度`))), ordered = TRUE)
studentHeights$`年齡` <- factor(studentHeights$`年齡`, levels = levels(factor(as.integer(studentHeights$`年齡`))), ordered = TRUE)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
# studentHeights
studentHeights$`學年度` <- factor(studentHeights$`學年度`, ordered = TRUE)
studentHeights$`年齡` <- factor(studentHeights$`年齡`, ordered = TRUE)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
# studentHeights
studentHeights$`學年度` <- factor(studentHeights$`學年度`, ordered = TRUE)
studentHeights$`年齡` <- factor(studentHeights$`年齡`, ordered = TRUE)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
# studentHeights
studentHeights$`學年度` <- factor(studentHeights$`學年度`, ordered = TRUE)
studentHeights$`年齡` <- factor(studentHeights$`年齡`, ordered = TRUE)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
# studentHeights
studentHeights$`學年度` <- factor(studentHeights$`學年度`, levels = levels(factor(as.integer(studentHeights$`學年度`))), ordered = TRUE)
studentHeights$`年齡` <- factor(studentHeights$`年齡`, levels = levels(factor(as.integer(studentHeights$`年齡`))), ordered = TRUE)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
# studentHeights
studentHeights$`學年度` <- factor(studentHeights$`學年度`, levels = levels(factor(as.integer(studentHeights$`學年度`))), ordered = TRUE)
studentHeights$`年齡` <- factor(studentHeights$`年齡`, levels = levels(factor(as.integer(studentHeights$`年齡`))), ordered = TRUE)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
# studentHeights
studentHeights$`學年度` <- factor(studentHeights$`學年度`, levels = levels(factor(as.integer(studentHeights$`學年度`))), ordered = TRUE)
studentHeights$`年齡` <- factor(studentHeights$`年齡`, levels = levels(factor(as.integer(studentHeights$`年齡`))), ordered = TRUE)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
studentHeights$年齡層 <- studentHeights$年齡
newAgeLevels <- c(rep("6-8", each=3), rep("9-12", each=4), rep("13-15", each=3))
levels(studentHeights$年齡層) <- newAgeLevels
studentHeights$`年齡層`
ageLevels <- levels(studentHeights$年齡層)
class_is_total <- studentHeights$類別 == "總計"
pick6_8 <- (studentHeights$年齡層 == ageLevels[1]) & class_is_total
pick9_12 <- (studentHeights$年齡層 == ageLevels[2]) & class_is_total
pick13_15 <- (studentHeights$年齡層 == ageLevels[3]) & class_is_total
averageHeightByGroup <- c(mean(studentHeights$平均身高[pick6_8]), mean(studentHeights$平均身高[pick9_12]), mean(studentHeights$平均身高[pick13_15]))
names(averageHeightByGroup) <- ageLevels
averageHeightByGroup
ageLevels <- levels(studentHeights$年齡層)
class_is_boy <- studentHeights$類別 == "男"
pick6_8 <- (studentHeights$年齡層 == ageLevels[1]) & class_is_boy # 6~8歲男生 true/false vector
pick9_12 <- (studentHeights$年齡層 == ageLevels[2]) & class_is_boy # 9~12歲男生 true/false vector
pick13_15 <- (studentHeights$年齡層 == ageLevels[3]) & class_is_boy # 13~15歲男生 true/false vector
# studentHeights$平均身高[pick6_8] :  # 6~8歲男生 身高向量
averageBoyHeight <- c(mean(studentHeights$平均身高[pick6_8]), mean(studentHeights$平均身高[pick9_12]), mean(studentHeights$平均身高[pick13_15]))
class_is_girl <- studentHeights$類別 == "女"
pick6_8 <- (studentHeights$年齡層 == ageLevels[1]) & class_is_girl # 6~8歲女生 true/false vector
pick9_12 <- (studentHeights$年齡層 == ageLevels[2]) & class_is_girl # 9~12歲女生 true/false vector
pick13_15 <- (studentHeights$年齡層 == ageLevels[3]) & class_is_girl # 13~15歲女生 true/false vector
averageGirlHeight <- c(mean(studentHeights$平均身高[pick6_8]), mean(studentHeights$平均身高[pick9_12]), mean(studentHeights$平均身高[pick13_15]))
genderDifferenceByAge <- averageBoyHeight - averageGirlHeight
names(genderDifferenceByAge) <- ageLevels
heightDifferenceByGroup <- genderDifferenceByAge
heightDifferenceByGroup
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
# realEstateRegex
realEstateRegex <- "不動[產與城鄉環境學]*系"
# realEstateRegex
realEstateRegex <- "不動產?與?城?鄉?環?境?學?系"
# realEstateRegex
realEstateRegex <- "不動產?與?城?鄉?環?境?學?系"
str_replace(differentMajors,realEstateRegex,"不動系")
differentMajors <- factor(differentMajors)
currentLevels <- levels(differentMajors)
currentLevels
# bSchoolRegex
#bSchoolRegex <- paste(currentLevels, collapse = '|')
#bSchoolRegex <- paste('(', bSchoolRegex, ')', sep = '')
bSchoolRegex <- "(休閒與運動管理學系|休運系|金融系|金融與合作經營學系|金融與合作學系)"
bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
#bSchoolRegex
bSchoolRegex <- "(休閒?與?運動?管?理?學?系|金融與?合?作?經?營?學?系)"
bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
differentMajors <- str_replace(differentMajors, "經濟[:graph:]*系", "經濟系")
differentMajors <- str_replace(differentMajors, "金融[:graph:]*系", "金融系")
differentMajors <- str_replace(differentMajors, "休閒[:graph:]*系", "休運系")
differentMajors <- str_replace(differentMajors, "社會工[:graph:]*系", "社工系")
differentMajors <- str_replace(differentMajors, "社會[:graph:]*系", "社會系")
differentMajors <- str_replace(differentMajors, "公共[:graph:]*系", "公行系")
differentMajors <- str_replace(differentMajors, "不動[產與城鄉環境學]*系","不動系")
differentMajors
school <- factor(differentMajors, ordered = TRUE)
levels(school) <- c("公共事務學院", "公共事務學院", "商學院", "社科院", "社科院", "商學院", "社科院")
levels(school)
school
levels(school)
View(params)
View(studentHeights)
differentMajors
differentMajors
school <- factor(differentMajors, ordered = TRUE)
levels(school) <- c("公共事務學院", "公共事務學院", "商學院", "社科院", "社科院", "商學院", "社科院")
levels(school)
school
levels(school)
school
bus <- "(休運系|金融系)"
school <- str_replace(differentMajors,bus,"商學院")
ss <- "(經濟系|社會系|社工系)"
school <- str_replace(school,ss,"社科院")
pa <- "(公行系|不動系)"
school <- str_replace(school,pa,"公共事務學院")
school <- as.factor(school)
class(school)
levels(school)
school
